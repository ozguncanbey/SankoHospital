@model List<SankoHospital.MvcWebUI.Models.PatientViewModel>

@{
Layout = "~/Views/Shared/_Layout.cshtml";
ViewData["Title"] = "Patients";
}

<h2 class="mb-4 fw-bold">Patients List</h2>

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

<!-- Hasta Ekleme Formu -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Add New Patient</h5>
        <form id="addPatientForm">
            <div class="row">
                <div class="col-md-3">
                    <input type="text" class="form-control" id="name" placeholder="Name" required>
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control" id="surname" placeholder="Surname" required>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="bloodType" required>
                        <option value="">Blood Type</option>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <input type="date" class="form-control" id="admissionDate" required>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success">Add Patient</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Hasta Listesi -->
<table class="table table-hover">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Surname</th>
        <th>Blood Type</th>
        <th>Admission Date</th>
        <th>Checkout Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody id="patientTableBody">
    @foreach (var patient in Model)
    {
    <tr id="row-@patient.Id">
        <td>@patient.Id</td>
        <td>@patient.Name</td>
        <td>@patient.Surname</td>
        <td>@patient.BloodType</td>
        <td>@patient.AdmissionDate.ToShortDateString()</td>
        <td>@(patient.CheckoutDate.HasValue ? patient.CheckoutDate.Value.ToShortDateString() : "-")</td>
        <td>
            <button class="btn btn-warning btn-sm" onclick="editPatient(@patient.Id, '@patient.Name', '@patient.Surname', '@patient.BloodType', '@patient.AdmissionDate.ToString("yyyy-MM-dd")')">Edit</button>
            <button class="btn btn-danger btn-sm" onclick="confirmDelete(@patient.Id)">Delete</button>
        </td>
    </tr>
    }
    </tbody>
</table>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('addPatientForm').addEventListener('submit', function (e) {
            e.preventDefault();
            showConfirmationToast('Add Patient', 'Are you sure you want to add this patient?', addPatient);
        });
    });

    function addPatient() {
        const name = document.getElementById('name').value.trim();
        const surname = document.getElementById('surname').value.trim();
        const bloodType = document.getElementById('bloodType').value;
        const admissionDate = document.getElementById('admissionDate').value; // ISO formatına çevirmeyin

        if (!name || !surname || !bloodType || !admissionDate) {
            alert("All fields are required!");
            return;
        }

        const patientData = {
            Name: name,
            Surname: surname,
            BloodType: bloodType,
            AdmissionDate: admissionDate,
            Checked: false
        };

        fetch('/Receptionist/AddPatient', {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(patientData)
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(data => {
                alert("Patient added successfully!");
                location.reload();
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Error adding patient: " + error.message);
            });
    }

    function confirmDelete(patientId) {
        showConfirmationToast('Delete Patient', 'Are you sure you want to delete this patient?', () => deletePatient(patientId));
    }

    function deletePatient(patientId) {
        fetch(`/Receptionist/DeletePatient?id=${patientId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" }
        }).then(response => {
            if (response.ok) {
                document.getElementById(`row-${patientId}`).remove();
            } else {
                alert("Error deleting patient");
            }
        });
    }

    function editPatient(id, name, surname, bloodType, admissionDate) {
        // Ekleme formunu gizle
        const addForm = document.querySelector('.card.mb-4');
        addForm.style.display = 'none';

        // Edit formunu oluştur ve ekle
        const editCard = document.createElement('div');
        editCard.className = 'card mb-4';
        editCard.id = 'editPatientCard';
        editCard.innerHTML = `
        <div class="card-body">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title">Edit Patient</h5>
                <button type="button" class="btn-close" onclick="closeEditForm()"></button>
            </div>
            <form id="editPatientForm">
                <div class="row">
                    <div class="col-md-3">
                        <input type="text" class="form-control" id="editName" value="${name}" placeholder="Name" required>
                    </div>
                    <div class="col-md-3">
                        <input type="text" class="form-control" id="editSurname" value="${surname}" placeholder="Surname" required>
                    </div>
                    <div class="col-md-2">
                        <select class="form-select" id="editBloodType" required>
                            <option value="A+" ${bloodType === 'A+' ? 'selected' : ''}>A+</option>
                            <option value="A-" ${bloodType === 'A-' ? 'selected' : ''}>A-</option>
                            <option value="B+" ${bloodType === 'B+' ? 'selected' : ''}>B+</option>
                            <option value="B-" ${bloodType === 'B-' ? 'selected' : ''}>B-</option>
                            <option value="AB+" ${bloodType === 'AB+' ? 'selected' : ''}>AB+</option>
                            <option value="AB-" ${bloodType === 'AB-' ? 'selected' : ''}>AB-</option>
                            <option value="O+" ${bloodType === 'O+' ? 'selected' : ''}>O+</option>
                            <option value="O-" ${bloodType === 'O-' ? 'selected' : ''}>O-</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <input type="date" class="form-control" id="editAdmissionDate" value="${admissionDate}" required>
                    </div>
                    <div class="col-md-2">
                        <button type="submit" class="btn btn-warning">Edit Patient</button>
                    </div>
                </div>
            </form>
        </div>
    `;

        // Edit formunu add formun yerine ekle
        addForm.parentNode.insertBefore(editCard, addForm);

        // Edit form submit event listener
        document.getElementById('editPatientForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const updatedData = {
                Id: id,
                Name: document.getElementById('editName').value.trim(),
                Surname: document.getElementById('editSurname').value.trim(),
                BloodType: document.getElementById('editBloodType').value,
                AdmissionDate: document.getElementById('editAdmissionDate').value
            };

            showConfirmationToast('Edit Patient', 'Are you sure you want to save these changes?', () => updatePatient(updatedData));
        });
    }

    function updatePatient(updatedData) {
        fetch('/Receptionist/UpdatePatient', {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(updatedData)
        })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }
                return response.json();
            })
            .then(data => {
                alert("Patient updated successfully!");
                location.reload();
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Error updating patient: " + error.message);
            });
    }

    function closeEditForm() {
        // Edit formunu kaldır
        document.getElementById('editPatientCard').remove();
        // Add formunu göster
        document.querySelector('.card.mb-4').style.display = 'block';
    }

    function showConfirmationToast(title, message, confirmAction) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';

        toast.innerHTML = `
        <div class="d-flex justify-content-between align-items-center mb-2">
            <strong>${title}</strong>
            <button type="button" class="btn-close" onclick="this.closest('.custom-toast').remove()"></button>
        </div>
        <p class="mb-2">${message}</p>
        <div class="d-flex gap-2">
            <button class="btn btn-sm btn-primary confirm-btn">Confirm</button>
            <button class="btn btn-sm btn-secondary" onclick="this.closest('.custom-toast').remove();">Cancel</button>
        </div>
    `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';

        // **Confirm butonuna event listener ekleyelim**
        toast.querySelector('.confirm-btn').addEventListener('click', function () {
            confirmAction(); // Callback fonksiyon çağrılıyor
            toast.remove();  // Toast mesajı kapatılıyor
        });
    }


</script>

<style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
        pointer-events: auto;
    }

    .custom-toast * {
        pointer-events: auto;
    }

    .custom-toast button {
        position: relative;
        z-index: 2;
        cursor: pointer;
    }
</style>
}
