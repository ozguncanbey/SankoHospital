@model SankoHospital.MvcWebUI.Models.ReceptionistModel.PatientsViewModel

@{
Layout = "~/Views/Shared/_Layout.cshtml";
ViewData["Title"] = "Patients";
}

<h2 class="mb-4 fw-bold">Patients List</h2>

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

<!-- Add/Edit Patient Form -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title" style="position: relative;">
            <span id="formTitle">Add New Patient</span>
            <button type="button" id="cancelEdit" class="btn-close" aria-label="Cancel Edit"
                    style="display: none; position: absolute; right: 0; top: -10px; font-size: 1.5rem; background: transparent; border: none;">
                &times;
            </button>
        </h5>
        <form id="addPatientForm">
            <div class="row g-2">
                <div class="col-md-2">
                    <input type="text" class="form-control form-control-sm" id="name" placeholder="Name" required>
                </div>
                <div class="col-md-2">
                    <input type="text" class="form-control form-control-sm" id="surname" placeholder="Surname" required>
                </div>
                <div class="col-md-2">
                    <select class="form-select form-select-sm" id="bloodType" required>
                        <option value="">Blood Type</option>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <select class="form-select form-select-sm" id="roomId" required>
                        <option value="">Select Room</option>
                        @foreach (var room in Model.AvailableRooms)
                        {
                        <option value="@room.Id" data-current-count="@room.CurrentPatientCount" data-capacity="@room.Capacity">
                            @room.RoomNumber (@room.CurrentPatientCount/@room.Capacity)
                        </option>
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <input type="date" class="form-control form-control-sm" id="admissionDate" required>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success btn-sm w-100">Add Patient</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Patients Table -->
<table class="table table-hover">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Surname</th>
        <th>Blood Type</th>
        <th>Admission Date</th>
        <th>Room Number</th>
        <th>Checkout Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody id="patientTableBody">
    @foreach (var patient in Model.Patients)
    {
    <tr id="row-@patient.Id" data-room-id="@patient.RoomId" data-admission-date="@patient.AdmissionDate.ToString("yyyy-MM-dd")">
        <td>@patient.Id</td>
        <td>@patient.Name</td>
        <td>@patient.Surname</td>
        <td>@patient.BloodType</td>
        <td>@patient.AdmissionDate.ToShortDateString()</td>
        <td>@(patient.RoomNumber ?? "Not Assigned")</td>
        <td>@(patient.CheckoutDate.HasValue ? patient.CheckoutDate.Value.ToShortDateString() : "-")</td>
        <td>
            <button class="btn btn-edit btn-sm" onclick="editPatient(@patient.Id)">Edit</button>
            <button class="btn btn-checkout btn-sm" onclick="confirmCheckout(@patient.Id)">Checkout</button>
            <button class="btn btn-delete btn-sm" onclick="confirmDelete(@patient.Id)">Delete</button>
        </td>
    </tr>
    }
    </tbody>
</table>

@section Scripts {
<script>
    // Global variables to manage form mode
    window.isEditMode = false;
    window.editingPatientId = null;

    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('addPatientForm').addEventListener('submit', function (e) {
            e.preventDefault();
            if (window.isEditMode) {
                showConfirmationToast('Edit Patient', 'Are you sure you want to update this patient?', updatePatient);
            } else {
                showConfirmationToast('Add Patient', 'Are you sure you want to add this patient?', addPatient);
            }
        });

        document.getElementById('roomId').addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            const currentCount = parseInt(selectedOption.dataset.currentCount);
            const capacity = parseInt(selectedOption.dataset.capacity);
            if (currentCount >= capacity) {
                alert('This room is full. Please select another room.');
                this.value = '';
            }
        });

        document.getElementById('cancelEdit').addEventListener('click', function() {
            cancelEdit();
        });
    });

    function addPatient() {
        const name = document.getElementById('name').value.trim();
        const surname = document.getElementById('surname').value.trim();
        const bloodType = document.getElementById('bloodType').value;
        const admissionDate = document.getElementById('admissionDate').value;
        const roomId = document.getElementById('roomId').value;

        if (!name || !surname || !bloodType || !admissionDate || !roomId) {
            showToast("All fields are required!", "error");
            return;
        }

        const patientData = {
            Name: name,
            Surname: surname,
            BloodType: bloodType,
            AdmissionDate: admissionDate,
            RoomId: parseInt(roomId),
            Checked: false
        };

        fetch('/Receptionist/AddPatient', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(patientData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const newPatient = data.patient;
                    const roomOption = document.querySelector(`#roomId option[value="${newPatient.RoomId}"]`);
                    const roomNumber = roomOption ? roomOption.textContent.split(" ")[0] : "Not Assigned";
                    const newRow = `
                    <tr id="row-${newPatient.Id}" data-room-id="${newPatient.RoomId}" data-admission-date="${new Date(newPatient.AdmissionDate).toISOString().split("T")[0]}">
                        <td>${newPatient.Id}</td>
                        <td>${newPatient.Name}</td>
                        <td>${newPatient.Surname}</td>
                        <td>${newPatient.BloodType}</td>
                        <td>${new Date(newPatient.AdmissionDate).toLocaleDateString()}</td>
                        <td>${roomNumber}</td>
                        <td>-</td>
                        <td>
                            <button class="btn btn-edit btn-sm" onclick="editPatient(${newPatient.Id})">Edit</button>
                            <button class="btn btn-checkout btn-sm" onclick="confirmCheckout(${newPatient.Id})">Checkout</button>
                            <button class="btn btn-delete btn-sm" onclick="confirmDelete(${newPatient.Id})">Delete</button>
                        </td>
                    </tr>`;
                    document.getElementById('patientTableBody').insertAdjacentHTML('beforeend', newRow);
                    document.getElementById('addPatientForm').reset();
                    document.getElementById('roomId').selectedIndex = 0;
                    updateRoomCapacity(roomId);
                    showToast('Patient added successfully!', 'success');
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Error adding patient: ' + error.message, 'error'));
    }

    function editPatient(patientId) {
        const row = document.getElementById('row-' + patientId);
        if (!row) return;
        const name = row.cells[1].textContent;
        const surname = row.cells[2].textContent;
        const bloodType = row.cells[3].textContent;
        const admissionDate = row.getAttribute('data-admission-date');
        const roomId = row.getAttribute('data-room-id');

        document.getElementById('name').value = name;
        document.getElementById('surname').value = surname;
        document.getElementById('bloodType').value = bloodType;
        document.getElementById('admissionDate').value = admissionDate;

        const roomSelect = document.getElementById('roomId');
        if (!roomSelect.querySelector(`option[value="${roomId}"]`)) {
            let newOption = document.createElement('option');
            newOption.value = roomId;
            newOption.textContent = row.cells[5].textContent;
            roomSelect.appendChild(newOption);
        }
        roomSelect.value = roomId;

        document.getElementById('formTitle').textContent = "Edit Patient";
        document.querySelector('#addPatientForm button[type="submit"]').textContent = "Edit Patient";
        document.getElementById('cancelEdit').style.display = 'inline-block';
        window.isEditMode = true;
        window.editingPatientId = patientId;
    }

    function cancelEdit() {
        document.getElementById('addPatientForm').reset();
        document.getElementById('roomId').selectedIndex = 0;
        document.getElementById('formTitle').textContent = "Add New Patient";
        document.querySelector('#addPatientForm button[type="submit"]').textContent = "Add Patient";
        document.getElementById('cancelEdit').style.display = 'none';
        window.isEditMode = false;
        window.editingPatientId = null;
    }

    function updatePatient() {
        const name = document.getElementById('name').value.trim();
        const surname = document.getElementById('surname').value.trim();
        const bloodType = document.getElementById('bloodType').value;
        const admissionDate = document.getElementById('admissionDate').value;
        const roomId = document.getElementById('roomId').value;

        if (!name || !surname || !bloodType || !admissionDate || !roomId) {
            showToast("All fields are required!", "error");
            return;
        }

        const patientData = {
            Id: window.editingPatientId,
            Name: name,
            Surname: surname,
            BloodType: bloodType,
            AdmissionDate: admissionDate,
            RoomId: parseInt(roomId),
            Checked: false
        };

        fetch('/Receptionist/UpdatePatient', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(patientData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const row = document.getElementById('row-' + window.editingPatientId);
                    row.cells[1].textContent = name;
                    row.cells[2].textContent = surname;
                    row.cells[3].textContent = bloodType;
                    row.cells[4].textContent = new Date(admissionDate).toLocaleDateString();
                    const roomNumber = data.patient.RoomNumber;
                    row.cells[5].textContent = roomNumber;
                    row.setAttribute('data-room-id', roomId);
                    row.setAttribute('data-admission-date', admissionDate);
                    showToast('Patient updated successfully!', 'success');
                    document.getElementById('addPatientForm').reset();
                    document.getElementById('formTitle').textContent = "Add New Patient";
                    document.querySelector('#addPatientForm button[type="submit"]').textContent = "Add Patient";
                    document.getElementById('cancelEdit').style.display = 'none';
                    window.isEditMode = false;
                    window.editingPatientId = null;
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Error updating patient: ' + error.message, 'error'));
    }

    // Checkout functions
    function confirmCheckout(patientId) {
        showConfirmationToast('Checkout Patient', 'Are you sure you want to checkout this patient?', () => checkoutPatient(patientId));
    }

    function checkoutPatient(patientId) {
        fetch('/Receptionist/CheckoutPatient', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(patientId)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    let row = document.getElementById('row-' + patientId);
                    // Checkout date is updated in the table (displayed as local date)
                    row.cells[6].textContent = new Date(data.checkoutDate).toLocaleDateString();
                    showToast('Patient checked out successfully!', 'success');
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Error checking out patient: ' + error.message, 'error'));
    }

    // Delete functions
    function confirmDelete(patientId) {
        showConfirmationToast('Delete Patient', 'Are you sure you want to delete this patient?', () => deletePatient(patientId));
    }

    function deletePatient(patientId) {
        fetch(`/Receptionist/DeletePatient/${patientId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" }
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById(`row-${patientId}`).remove();
                    showToast('Patient deleted successfully!', 'success');
                } else {
                    showToast('Error: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Error deleting patient: ' + error.message, 'error'));
    }

    function updateRoomCapacity(roomId) {
        const roomOption = document.querySelector(`#roomId option[value="${roomId}"]`);
        if (roomOption) {
            let currentCount = parseInt(roomOption.dataset.currentCount);
            let capacity = parseInt(roomOption.dataset.capacity);
            if (currentCount < capacity) {
                currentCount++;
                roomOption.dataset.currentCount = currentCount;
                roomOption.textContent = `${roomOption.textContent.split(" ")[0]} (${currentCount}/${capacity})`;
            }
        }
    }

    function showConfirmationToast(title, message, confirmAction) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';
        toast.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>${title}</strong>
                <button type="button" class="btn-close" onclick="this.closest('.custom-toast').remove()"></button>
            </div>
            <p class="mb-2">${message}</p>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-primary confirm-btn">Confirm</button>
                <button class="btn btn-sm btn-secondary" onclick="this.closest('.custom-toast').remove();">Cancel</button>
            </div>`;
        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';
        toast.querySelector('.confirm-btn').addEventListener('click', function () {
            confirmAction();
            toast.remove();
        });
    }

    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.className = `custom-toast ${type}`;
        toast.innerHTML = `<p>${message}</p>`;
        document.querySelector('.toast-container').appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }
</script>

<style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }
    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
    }
    .custom-toast.success {
        background: #28a745;
        color: white;
    }
    .custom-toast.error {
        background: #dc3545;
        color: white;
    }
    .custom-toast button {
        position: relative;
        z-index: 1052;
        pointer-events: auto;
    }
    .custom-toast .btn-close {
        opacity: 0.8;
        pointer-events: auto;
    }
    .custom-toast .btn-close:hover {
        opacity: 1;
    }
    .custom-toast p {
        margin-bottom: 0.5rem;
    }
    .custom-toast * {
        pointer-events: auto;
    }
    .custom-toast .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }
    .custom-toast .gap-2 {
        gap: 0.5rem !important;
    }
    /* Custom button styles */
    .btn-edit {
        background-color: #ffc107 !important;
        color: white !important;
        border-color: #ffc107 !important;
    }
    .btn-checkout {
        background-color: #fd7e14 !important;
        color: white !important;
        border-color: #fd7e14 !important;
    }
    .btn-delete {
        background-color: #dc3545 !important;
        color: white !important;
        border-color: #dc3545 !important;
    }
</style>
}
