@model SankoHospital.MvcWebUI.Models.FilterModels.PatientListViewModel
@* Sayfanın en üstünde ekleyin: *@
@{
    bool isFilterActive = Model.Id.HasValue
                          || !string.IsNullOrEmpty(Model.Name)
                          || !string.IsNullOrEmpty(Model.Surname)
                          || Model.RoomNumber.HasValue
                          || !string.IsNullOrEmpty(Model.BloodType)
                          || Model.AdmissionDate.HasValue
                          || Model.CheckoutDate.HasValue;
}

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Hastalar";
}

<div class="card mb-4">
<div class="card-body">
<div class="d-flex justify-content-between align-items-center mb-3">
    <h4 class="card-title mb-0 fw-bold text-primary">
        <i class="fas fa-user-injured me-2"></i>Hasta Listesi
    </h4>
    <button type="button" id="toggleFilterForm" class="btn btn-outline-secondary btn-sm">
        <i class="fas fa-filter me-1"></i> Filtreleri Göster/Gizle
    </button>
</div>

<!-- Add/Edit Patient Form -->
<div class="card bg-light border-0 mb-4">
    <div class="card-body">
        <h5 class="card-title position-relative text-primary">
            <i class="fas fa-plus-circle me-2"></i>
            <span id="formTitle">Yeni Hasta Ekle</span>
            <button type="button" id="cancelEdit"
                    class="btn btn-close position-absolute end-0 top-50 translate-middle-y"
                    style="display: none;" aria-label="Cancel Edit">
            </button>
        </h5>
        <form id="addPatientForm" class="mt-3">
            <div class="row g-3">
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="name" placeholder="İsim" required>
                        <label for="name">İsim</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="text" class="form-control" id="surname" placeholder="Soyisim" required>
                        <label for="surname">Soyisim</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <select class="form-select" id="bloodType" required>
                            <option value="">Seçiniz</option>
                            <option value="A+">A+</option>
                            <option value="A-">A-</option>
                            <option value="B+">B+</option>
                            <option value="B-">B-</option>
                            <option value="AB+">AB+</option>
                            <option value="AB-">AB-</option>
                            <option value="O+">O+</option>
                            <option value="O-">O-</option>
                        </select>
                        <label for="bloodType">Kan Grubu</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <select class="form-select" id="roomId" required>
                            <option value="">Seçiniz</option>
                            @foreach (var room in Model.AvailableRooms)
                            {
                                <option value="@room.Id" data-current-count="@room.CurrentPatientCount"
                                        data-capacity="@room.Capacity">
                                    @room.RoomNumber (@room.CurrentPatientCount/@room.Capacity)
                                </option>
                            }
                        </select>
                        <label for="roomId">Oda</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="date" class="form-control" id="admissionDate" required>
                        <label for="admissionDate">Giriş Tarihi</label>
                    </div>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success w-100 h-100" id="submitBtn">
                        <i class="fas fa-plus-circle me-2"></i>Hasta Ekle
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Filter Form -->
<div class="card border-0 shadow-sm mb-4" id="filterCard" style="display: @(isFilterActive ? "block" : "none");">
    <div class="card-header bg-light py-3">
        <h5 class="mb-0 text-primary">
            <i class="fas fa-filter me-2"></i>Hasta Filtreleme
        </h5>
    </div>
    <div class="card-body">
        <form id="filterForm" method="get" class="row g-3 justify-content-center">
            <!-- Hasta ID -->
            <div class="col-md-1">
                <div class="form-floating">
                    <input type="number" name="id" class="form-control form-control-sm"
                           value="@(Model.Id.HasValue ? Model.Id.Value.ToString() : string.Empty)" placeholder="ID"/>
                    <label class="form-label">ID</label>
                </div>
            </div>
            <!-- Ad -->
            <div class="col-md-2">
                <div class="form-floating">
                    <input type="text" name="name" class="form-control form-control-sm"
                           value="@Model.Name" placeholder="Ad"/>
                    <label class="form-label">Ad</label>
                </div>
            </div>
            <!-- Soyad -->
            <div class="col-md-2">
                <div class="form-floating">
                    <input type="text" name="surname" class="form-control form-control-sm"
                           value="@Model.Surname" placeholder="Soyad"/>
                    <label class="form-label">Soyad</label>
                </div>
            </div>
            <!-- Oda Numarası -->
            <div class="col-md-2">
                <div class="form-floating">
                    <input type="number" name="roomNumber" class="form-control form-control-sm"
                           value="@(Model.RoomNumber.HasValue ? Model.RoomNumber.Value.ToString() : string.Empty)" placeholder="Oda Numarası"/>
                    <label class="form-label">Oda Numarası</label>
                </div>
            </div>
            <!-- Kan Grubu -->
            <div class="col-md-2">
                <div class="form-floating">
                    <select name="bloodType" class="form-select form-select-sm">
                        <option value="">Tümü</option>
                        @foreach (var item in Model.BloodTypeList)
                        {
                            if (Model.BloodType == item.Value)
                            {
                                <option value="@item.Value" selected="selected">@item.Text</option>
                            }
                            else
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        }
                    </select>
                    <label class="form-label">Kan Grubu</label>
                </div>
            </div>
            <!-- Giriş Tarihi -->
            <div class="col-md-2">
                <div class="form-floating">
                    <input type="date" name="admissionDate" class="form-control form-control-sm"
                           value="@(Model.AdmissionDate.HasValue ? Model.AdmissionDate.Value.ToString("yyyy-MM-dd") : string.Empty)" placeholder="Giriş Tarihi"/>
                    <label class="form-label">Giriş Tarihi</label>
                </div>
            </div>
            <!-- Çıkış Tarihi -->
            <div class="col-md-2">
                <div class="form-floating">
                    <input type="date" name="checkoutDate" class="form-control form-control-sm"
                           value="@(Model.CheckoutDate.HasValue ? Model.CheckoutDate.Value.ToString("yyyy-MM-dd") : string.Empty)" placeholder="Çıkış Tarihi"/>
                    <label class="form-label">Çıkış Tarihi</label>
                </div>
            </div>
            <!-- Butonlar -->
            <div class="col-12 text-center mt-3">
                <button type="submit" class="btn btn-primary btn-sm me-2">
                    <i class="fas fa-search me-1"></i> Filtrele
                </button>
                <button type="button" class="btn btn-secondary btn-sm" onclick="resetFilters()">
                    <i class="fas fa-undo me-1"></i> Sıfırla
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

<!-- Patients Table -->
<div class="table-responsive">
    <table class="table table-hover table-striped border">
        <thead class="table-primary">
        <tr>
            <th class="text-center">ID</th>
            <th>İsim</th>
            <th>Soyisim</th>
            <th class="text-center">Oda No</th>
            <th class="text-center">Kan Grubu</th>
            <th class="text-center">Giriş Tarihi</th>
            <th class="text-center">Çıkış Tarihi</th>
            <th class="text-center">Aksiyonlar</th>
        </tr>
        </thead>
        <tbody id="patientTableBody">
        @foreach (var patient in Model.Patients)
        {
            <tr id="row-@patient.Id" data-room-id="@patient.RoomId"
                data-admission-date="@patient.AdmissionDate.ToString("yyyy-MM-dd")">
                <td class="text-center">@patient.Id</td>
                <td>@patient.Name</td>
                <td>@patient.Surname</td>
                <td class="text-center">@(patient.RoomNumber)</td>
                <td class="text-center">
                    <span class="badge bg-info text-dark">@patient.BloodType</span>
                </td>
                <td class="text-center">@patient.AdmissionDate.ToShortDateString()</td>
                <td class="text-center">@(patient.CheckoutDate.HasValue ? patient.CheckoutDate.Value.ToShortDateString() : "-")</td>
                <td class="text-center">
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-primary btn-sm btn-edit" data-patient-id="@patient.Id"
                                title="Düzenle">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-outline-success btn-sm btn-checkout" data-patient-id="@patient.Id"
                                title="Çıkış Ver">
                            <i class="fas fa-sign-out-alt"></i>
                        </button>
                        <button class="btn btn-outline-danger btn-sm btn-delete" data-patient-id="@patient.Id"
                                title="Sil">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>
</div>
</div>

@section Scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        const tableBody = document.getElementById('patientTableBody');
        const toggleFilterFormBtn = document.getElementById('toggleFilterForm');
        const filterCard = document.getElementById('filterCard');

        // Toggle filter form
        toggleFilterFormBtn.addEventListener('click', function () {
            if (filterCard.style.display === 'none' || filterCard.style.display === '') {
                filterCard.style.display = 'block';
                toggleFilterFormBtn.innerHTML = '<i class="fas fa-filter me-1"></i> Filtreleri Gizle';
            } else {
                filterCard.style.display = 'none';
                toggleFilterFormBtn.innerHTML = '<i class="fas fa-filter me-1"></i> Filtreleri Göster';
            }
        });

        // Event delegation for dynamic elements
        tableBody.addEventListener('click', function (e) {
            if (e.target.closest('.btn-edit')) {
                const patientId = e.target.closest('.btn-edit').dataset.patientId;
                editPatient(patientId);
            }
            if (e.target.closest('.btn-checkout')) {
                const patientId = e.target.closest('.btn-checkout').dataset.patientId;
                confirmCheckout(patientId);
            }
            if (e.target.closest('.btn-delete')) {
                const patientId = e.target.closest('.btn-delete').dataset.patientId;
                confirmDelete(patientId);
            }
        });

        document.getElementById('addPatientForm').addEventListener('submit', function (e) {
            e.preventDefault();
            if (window.isEditMode) {
                showConfirmationToast('Hastayı Düzenle', 'Bu hastayı güncellemek istediğinizden emin misiniz?', updatePatient);
            } else {
                showConfirmationToast('Hasta Ekle', 'Bu hastayı eklemek istediğinizden emin misiniz?', addPatient);
            }
        });

        document.getElementById('roomId').addEventListener('change', function () {
            const selectedOption = this.options[this.selectedIndex];
            const currentCount = parseInt(selectedOption.dataset.currentCount);
            const capacity = parseInt(selectedOption.dataset.capacity);
            if (currentCount >= capacity) {
                showToast('Bu oda dolu. Lütfen başka oda seçin.', 'error');
                this.value = '';
            }
        });

        document.getElementById('cancelEdit').addEventListener('click', cancelEdit);
    });

    function addPatient() {
        const name = document.getElementById('name').value.trim();
        const surname = document.getElementById('surname').value.trim();
        const bloodType = document.getElementById('bloodType').value;
        const admissionDate = document.getElementById('admissionDate').value;
        const roomId = document.getElementById('roomId').value;

        if (!name || !surname || !bloodType || !admissionDate || !roomId) {
            showToast("Tüm alanlar girilmeli!", "error");
            return;
        }

        const patientData = {
            Name: name,
            Surname: surname,
            BloodType: bloodType,
            AdmissionDate: admissionDate,
            RoomId: parseInt(roomId),
            Checked: false
        };

        fetch('/Receptionist/AddPatient', {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(patientData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const newPatient = data.patient;
                    const roomOption = document.querySelector(`#roomId option[value="${newPatient.RoomId}"]`);
                    const roomNumber = roomOption ? roomOption.textContent.split(" ")[0] : "Atanmamış";
                    const newRow = `
                            <tr id="row-${newPatient.Id}" data-room-id="${newPatient.RoomId}" data-admission-date="${new Date(newPatient.AdmissionDate).toISOString().split("T")[0]}">
                                <td class="text-center">${newPatient.Id}</td>
                                <td>${newPatient.Name}</td>
                                <td>${newPatient.Surname}</td>
                                <td class="text-center">${roomNumber}</td>
                                <td class="text-center"><span class="badge bg-info text-dark">${newPatient.BloodType}</span></td>
                                <td class="text-center">${new Date(newPatient.AdmissionDate).toLocaleDateString()}</td>
                                <td class="text-center">-</td>
                                <td class="text-center">
                                    <div class="btn-group" role="group">
                                        <button class="btn btn-outline-primary btn-sm btn-edit" data-patient-id="${newPatient.Id}" title="Düzenle">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-outline-success btn-sm btn-checkout" data-patient-id="${newPatient.Id}" title="Çıkış Ver">
                                            <i class="fas fa-sign-out-alt"></i>
                                        </button>
                                        <button class="btn btn-outline-danger btn-sm btn-delete" data-patient-id="${newPatient.Id}" title="Sil">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>`;
                    document.getElementById('patientTableBody').insertAdjacentHTML('beforeend', newRow);
                    document.getElementById('addPatientForm').reset();
                    document.getElementById('roomId').selectedIndex = 0;
                    updateRoomCapacity(roomId);
                    showToast('Hasta başarıyla eklendi!', 'success');
                } else {
                    showToast('Hata: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Hasta eklenirken hata oluştu: ' + error.message, 'error'));
    }

    function editPatient(patientId) {
        const row = document.getElementById('row-' + patientId);
        if (!row) return;
        const name = row.cells[1].textContent;
        const surname = row.cells[2].textContent;
        const bloodType = row.cells[4].querySelector('.badge').textContent;
        const admissionDate = row.getAttribute('data-admission-date');
        const roomId = row.getAttribute('data-room-id');

        document.getElementById('name').value = name;
        document.getElementById('surname').value = surname;
        document.getElementById('bloodType').value = bloodType;
        document.getElementById('admissionDate').value = admissionDate;

        const roomSelect = document.getElementById('roomId');
        if (!roomSelect.querySelector(`option[value="${roomId}"]`)) {
            let newOption = document.createElement('option');
            newOption.value = roomId;
            newOption.textContent = row.cells[3].textContent;
            roomSelect.appendChild(newOption);
        }
        roomSelect.value = roomId;

        document.getElementById('formTitle').textContent = "Hastayı Düzenle";
        document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save me-2"></i>Hastayı Güncelle';
        document.getElementById('submitBtn').classList.replace('btn-success', 'btn-primary');
        document.getElementById('cancelEdit').style.display = 'inline-block';
        window.isEditMode = true;
        window.editingPatientId = patientId;

        // Scroll to form
        document.getElementById('formTitle').scrollIntoView({behavior: 'smooth'});
    }

    function cancelEdit() {
        document.getElementById('addPatientForm').reset();
        document.getElementById('roomId').selectedIndex = 0;
        document.getElementById('formTitle').textContent = "Yeni Hasta Ekle";
        document.getElementById('submitBtn').innerHTML = '<i class="fas fa-plus-circle me-2"></i>Hasta Ekle';
        document.getElementById('submitBtn').classList.replace('btn-primary', 'btn-success');
        document.getElementById('cancelEdit').style.display = 'none';
        window.isEditMode = false;
        window.editingPatientId = null;
    }

    function updatePatient() {
        const name = document.getElementById('name').value.trim();
        const surname = document.getElementById('surname').value.trim();
        const bloodType = document.getElementById('bloodType').value;
        const admissionDate = document.getElementById('admissionDate').value;
        const roomId = document.getElementById('roomId').value;

        if (!name || !surname || !bloodType || !admissionDate || !roomId) {
            showToast("Tüm alanlar girilmeli!", "error");
            return;
        }

        const patientData = {
            Id: window.editingPatientId,
            Name: name,
            Surname: surname,
            BloodType: bloodType,
            AdmissionDate: admissionDate,
            RoomId: parseInt(roomId),
            Checked: false
        };

        fetch('/Receptionist/UpdatePatient', {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(patientData)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const row = document.getElementById('row-' + window.editingPatientId);
                    row.cells[1].textContent = name;
                    row.cells[2].textContent = surname;
                    row.cells[4].innerHTML = `<span class="badge bg-info text-dark">${bloodType}</span>`;
                    row.cells[5].textContent = new Date(admissionDate).toLocaleDateString();
                    const roomNumber = data.patient.RoomNumber;
                    row.cells[3].textContent = roomNumber;
                    row.setAttribute('data-room-id', roomId);
                    row.setAttribute('data-admission-date', admissionDate);
                    showToast('Hasta başarıyla güncellendi!', 'success');
                    document.getElementById('addPatientForm').reset();
                    document.getElementById('formTitle').textContent = "Yeni Hasta Ekle";
                    document.getElementById('submitBtn').innerHTML = '<i class="fas fa-plus-circle me-2"></i>Hasta Ekle';
                    document.getElementById('submitBtn').classList.replace('btn-primary', 'btn-success');
                    document.getElementById('cancelEdit').style.display = 'none';
                    window.isEditMode = false;
                    window.editingPatientId = null;
                } else {
                    showToast('Hata: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Hasta güncellenirken hata oluştu: ' + error.message, 'error'));
    }

    function confirmCheckout(patientId) {
        showConfirmationToast('Hastanın Çıkışını Ver', 'Bu hastanın çıkışını vermek istediğinizden emin misiniz?', () => checkoutPatient(patientId));
    }

    function checkoutPatient(patientId) {
        fetch('/Receptionist/CheckoutPatient', {
            method: "POST",
            headers: {"Content-Type": "application/json"},
            body: JSON.stringify(patientId)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    let row = document.getElementById('row-' + patientId);
                    row.cells[6].textContent = new Date(data.checkoutDate).toLocaleDateString();
                    // Satırı hafif vurgulama
                    row.classList.add('table-success');
                    setTimeout(() => {
                        row.classList.remove('table-success');
                    }, 3000);
                    showToast('Hastanın çıkışı verildi!', 'success');
                } else {
                    showToast('Hata: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Hastanın çıkışı verilemedi: ' + error.message, 'error'));
    }

    function confirmDelete(patientId) {
        showConfirmationToast('Hastayı Sil', 'Bu hastayı silmek istediğinizden emin misiniz?', () => deletePatient(patientId));
    }

    function deletePatient(patientId) {
        fetch(`/Receptionist/DeletePatient/${patientId}`, {
            method: "DELETE",
            headers: {"Content-Type": "application/json"}
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const row = document.getElementById(`row-${patientId}`);
                    // Satırı kırmızı yapıp silme animasyonu ekleme
                    row.classList.add('table-danger');
                    setTimeout(() => {
                        row.style.transition = 'opacity 0.5s ease';
                        row.style.opacity = '0';
                        setTimeout(() => {
                            row.remove();
                        }, 500);
                    }, 500);
                    showToast('Hasta başarıyla silindi!', 'success');
                } else {
                    showToast('Hata: ' + data.message, 'error');
                }
            })
            .catch(error => showToast('Hasta silinirken hata oluştu: ' + error.message, 'error'));
    }

    function updateRoomCapacity(roomId) {
        const roomOption = document.querySelector(`#roomId option[value="${roomId}"]`);
        if (roomOption) {
            let currentCount = parseInt(roomOption.dataset.currentCount);
            let capacity = parseInt(roomOption.dataset.capacity);
            if (currentCount < capacity) {
                currentCount++;
                roomOption.dataset.currentCount = currentCount;
                roomOption.textContent = `${roomOption.textContent.split(" ")[0]} (${currentCount}/${capacity})`;
            }
        }
    }

    function showConfirmationToast(title, message, confirmAction) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast confirmation-toast';
        toast.innerHTML = `
                    <div class="toast-header">
                        <strong class="me-auto">${title}</strong>
                        <button type="button" class="btn-close" onclick="this.closest('.custom-toast').remove()"></button>
                    </div>
                    <div class="toast-body">
                        <p class="mb-3">${message}</p>
                        <div class="d-flex justify-content-end gap-2">
                            <button class="btn btn-sm btn-secondary" onclick="this.closest('.custom-toast').remove();">Vazgeç</button>
                            <button class="btn btn-sm btn-primary confirm-btn">Onayla</button>
                        </div>
                    </div>`;
        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';
        toast.querySelector('.confirm-btn').addEventListener('click', function () {
            confirmAction();
            toast.remove();
        });
    }

    function resetFilters() {
        const form = document.getElementById('filterForm');
        if (!form) return;
        const inputs = Array.from(form.querySelectorAll('input, select'));
        inputs.forEach(input => {
            if (input.type === 'text' || input.type === 'date' || input.type === 'number') {
                input.value = '';
            } else if (input.tagName.toLowerCase() === 'select') {
                input.selectedIndex = 0;
            }
        });
        form.submit();
    }

    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.className = `custom-toast ${type}`;
        toast.innerHTML = `
                <div class="toast-header">
                    <strong class="me-auto">${type === 'success' ? 'Başarılı' : 'Hata'}</strong>
                    <small>Şimdi</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>`;
        document.querySelector('.toast-container').appendChild(toast);

        // Bootstrap toast özelliklerini manuel uygulama
        const bsToast = new bootstrap.Toast(toast, {
            autohide: true,
            delay: 3000
        });
        bsToast.show();

        // Otomatik silme
        setTimeout(() => {
            if (toast.parentNode) {
                toast.remove();
            }
        }, 3000);
    }
</script>

    <style>
    /* Ana renkler */
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --success-color: #27ae60;
        --info-color: #3498db;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --light-color: #ecf0f1;
    }

    /* Kart stilleri */
    .card {
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
    }

    .card:hover {
        box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
    }

    .card-header {
        border-top-left-radius: 0.5rem !important;
        border-top-right-radius: 0.5rem !important;
    }

    /* Tablo stilleri */
    .table {
        vertical-align: middle;
        font-size: 0.95rem;
    }

    .table thead th {
        background-color: var(--primary-color);
        color: white;
        font-weight: 500;
        border-color: var(--secondary-color);
    }

    .table tbody tr:hover {
        background-color: rgba(52, 73, 94, 0.05);
    }

    /* Button stilleri */
    .btn-group .btn {
        border-radius: 0.25rem;
        margin: 0 0.1rem;
    }

    .btn-primary {
        background-color: var(--primary-color);
        border-color: var(--primary-color);
    }

    .btn-primary:hover {
        background-color: var(--secondary-color);
        border-color: var(--secondary-color);
    }

    .btn-success {
        background-color: var(--success-color);
        border-color: var(--secondary-color);
    }

    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
    }

    .custom-toast.success {
        background: #28a745;
        color: white;
    }

    .custom-toast.error {
        background: #dc3545;
        color: white;
    }

    .custom-toast button {
        position: relative;
        z-index: 1052;
        pointer-events: auto;
    }

    .custom-toast .btn-close {
        opacity: 0.8;
        pointer-events: auto;
    }

    .custom-toast .btn-close:hover {
        opacity: 1;
    }

    .custom-toast p {
        margin-bottom: 0.5rem;
    }

    .custom-toast * {
        pointer-events: auto;
    }

    .custom-toast .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    .custom-toast .gap-2 {
        gap: 0.5rem !important;
    }
</style>
}