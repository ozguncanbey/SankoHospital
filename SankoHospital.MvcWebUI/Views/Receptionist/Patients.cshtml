@model List<SankoHospital.MvcWebUI.Models.PatientViewModel>

@{
Layout = "~/Views/Shared/_Layout.cshtml";
ViewData["Title"] = "Patients";
}

<h2 class="mb-4 fw-bold">Patients List</h2>

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

<!-- Hasta Ekleme Formu -->
<div class="card mb-4">
    <div class="card-body">
        <h5 class="card-title">Add New Patient</h5>
        <form id="addPatientForm">
            <div class="row">
                <div class="col-md-3">
                    <input type="text" class="form-control" id="name" placeholder="Name" required>
                </div>
                <div class="col-md-3">
                    <input type="text" class="form-control" id="surname" placeholder="Surname" required>
                </div>
                <div class="col-md-2">
                    <select class="form-select" id="bloodType" required>
                        <option value="">Blood Type</option>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <input type="date" class="form-control" id="admissionDate" required>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-success">Add Patient</button>
                </div>
            </div>
        </form>
    </div>
</div>

<!-- Hasta Listesi -->
<table class="table table-hover">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Surname</th>
        <th>Blood Type</th>
        <th>Admission Date</th>
        <th>Checkout Date</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody id="patientTableBody">
    @foreach (var patient in Model)
    {
    <tr id="row-@patient.Id">
        <td>@patient.Id</td>
        <td>@patient.Name</td>
        <td>@patient.Surname</td>
        <td>@patient.BloodType</td>
        <td>@patient.AdmissionDate.ToShortDateString()</td>
        <td>@(patient.CheckoutDate.HasValue ? patient.CheckoutDate.Value.ToShortDateString() : "-")</td>
        <td>
            <button class="btn btn-warning btn-sm" onclick="editPatient(@patient.Id, '@patient.Name', '@patient.Surname', '@patient.BloodType', '@patient.AdmissionDate.ToString("yyyy-MM-dd")')">Edit</button>
            <button class="btn btn-danger btn-sm" onclick="confirmDelete(@patient.Id)">Delete</button>
        </td>
    </tr>
    }
    </tbody>
</table>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('addPatientForm').addEventListener('submit', function (e) {
            e.preventDefault();
            showConfirmationToast('Add Patient', 'Are you sure you want to add this patient?', addPatient);
        });
    });

    function addPatient() {
        const patientData = {
            Name: document.getElementById('name').value,
            Surname: document.getElementById('surname').value,
            BloodType: document.getElementById('bloodType').value,
            AdmissionDate: document.getElementById('admissionDate').value
        };

        fetch('/Receptionist/AddPatient', {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(patientData)
        }).then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert("Error adding patient");
                }
            });
    }

    function confirmDelete(patientId) {
        showConfirmationToast('Delete Patient', 'Are you sure you want to delete this patient?', () => deletePatient(patientId));
    }

    function deletePatient(patientId) {
        fetch(`/Receptionist/DeletePatient?id=${patientId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" }
        }).then(response => {
            if (response.ok) {
                document.getElementById(`row-${patientId}`).remove();
            } else {
                alert("Error deleting patient");
            }
        });
    }

    function editPatient(id, name, surname, bloodType, admissionDate) {
        const newName = prompt("Enter new name:", name);
        const newSurname = prompt("Enter new surname:", surname);
        const newBloodType = prompt("Enter new blood type:", bloodType);
        const newAdmissionDate = prompt("Enter new admission date (YYYY-MM-DD):", admissionDate);

        if (newName && newSurname && newBloodType && newAdmissionDate) {
            const updatedData = {
                Id: id,
                Name: newName,
                Surname: newSurname,
                BloodType: newBloodType,
                AdmissionDate: newAdmissionDate
            };

            fetch('/Receptionist/UpdatePatient', {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedData)
            }).then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert("Error updating patient");
                }
            });
        }
    }

    function showConfirmationToast(title, message, confirmAction) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';
        toast.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>${title}</strong>
                <button type="button" class="btn-close" onclick="this.closest('.custom-toast').remove()"></button>
            </div>
            <p class="mb-2">${message}</p>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-primary" onclick="confirmAction(); this.closest('.custom-toast').remove();">Confirm</button>
                <button class="btn btn-sm btn-secondary" onclick="this.closest('.custom-toast').remove();">Cancel</button>
            </div>
        `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';
    }
</script>

<style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
        pointer-events: auto;
    }

    .custom-toast * {
        pointer-events: auto;
    }

    .custom-toast button {
        position: relative;
        z-index: 2;
        cursor: pointer;
    }
</style>
}
