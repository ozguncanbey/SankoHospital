@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SankoHospital.MvcWebUI.Helpers
@model SankoHospital.MvcWebUI.Models.FilterModels.BedListViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Yataklar";
    bool isFilterActive = Model.Id.HasValue
                          || Model.RoomNumber.HasValue
                          || Model.BedNumber.HasValue
                          || Model.PatientId.HasValue
                          || Model.LastCleanedDate.HasValue
                          || !string.IsNullOrEmpty(Model.SelectedStatus);
}

<div class="container-fluid py-3">
    <!-- Page Header -->
    <div class="row mb-4">
        <div class="col">
            <h2 class="fw-bold" style="color: #2c3e50;">
                <i class="fas fa-bed me-2"></i>Yatak Listesi
            </h2>
        </div>
    </div>

    <!-- Filter Card -->
    <div class="card mb-4" style="box-shadow: var(--card-shadow);">
        <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
            <h5 class="mb-0" style="color: var(--sidebar-bg);">
                <i class="fas fa-filter me-2"></i>Yatak Filtreleme
            </h5>
            <button type="button" id="toggleFilterForm" class="btn btn-outline-secondary btn-sm">
                <i class="fas fa-filter me-1"></i> Filtreleri Göster/Gizle
            </button>
        </div>
        <div class="card-body" id="filterCard" style="display: @(isFilterActive ? "block" : "none");">
            <form id="filterForm" method="get" class="row g-3">
                <!-- Yatak ID -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number" name="id" class="form-control form-control-sm"
                               value="@(Model.Id.HasValue ? Model.Id.Value.ToString() : string.Empty)" placeholder="Yatak ID"/>
                        <label class="form-label">Yatak ID</label>
                    </div>
                </div>
                <!-- Oda Numarası -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number" name="roomNumber" class="form-control form-control-sm"
                               value="@(Model.RoomNumber.HasValue ? Model.RoomNumber.Value.ToString() : string.Empty)" placeholder="Oda Numarası"/>
                        <label class="form-label">Oda Numarası</label>
                    </div>
                </div>
                <!-- Yatak Numarası -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number" name="bedNumber" class="form-control form-control-sm"
                               value="@(Model.BedNumber.HasValue ? Model.BedNumber.Value.ToString() : string.Empty)" placeholder="Yatak Numarası"/>
                        <label class="form-label">Yatak Numarası</label>
                    </div>
                </div>
                <!-- Hasta ID -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="number" name="patientId" class="form-control form-control-sm"
                               value="@(Model.PatientId.HasValue ? Model.PatientId.Value.ToString() : string.Empty)" placeholder="Hasta ID"/>
                        <label class="form-label">Hasta ID</label>
                    </div>
                </div>
                <!-- Son Temizlik Tarihi -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <input type="date" name="lastCleanedDate" class="form-control form-control-sm"
                               value="@(Model.LastCleanedDate.HasValue ? Model.LastCleanedDate.Value.ToString("yyyy-MM-dd") : string.Empty)" placeholder="Tarih"/>
                        <label class="form-label">Son Temizlik Tarihi</label>
                    </div>
                </div>
                <!-- Durum -->
                <div class="col-md-2">
                    <div class="form-floating">
                        <select name="status" class="form-select form-select-sm">
                            <option value="">Tümü</option>
                            @foreach (var item in Model.StatusList)
                            {
                                if (Model.SelectedStatus == item.Value)
                                {
                                    <option value="@item.Value" selected="selected">@item.Text</option>
                                }
                                else
                                {
                                    <option value="@item.Value">@item.Text</option>
                                }
                            }
                        </select>
                        <label class="form-label">Durum</label>
                    </div>
                </div>
                <!-- Butonlar -->
                <div class="col-md-12 text-center mt-3">
                    <button type="submit" class="btn btn-primary btn-sm me-2">
                        <i class="fas fa-search me-1"></i> Filtrele
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" onclick="resetFilters()">
                        <i class="fas fa-undo me-1"></i> Sıfırla
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Toast Notifications Container -->
    <div class="toast-container"></div>

    @Html.AntiForgeryToken()

    <!-- Beds Table Card -->
    <div class="card" style="box-shadow: var(--card-shadow);">
        <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
            <h5 class="mb-0" style="color: var(--sidebar-bg);">
                <i class="fas fa-bed me-2"></i>Yatak Listesi
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover table-striped border">
                    <thead class="table-primary">
                    <tr>
                        <th class="text-center">ID</th>
                        <th class="text-center">Oda ID</th>
                        <th class="text-center">Oda Numarası</th>
                        <th class="text-center">Yatak Numarası</th>
                        <th class="text-center">Hasta ID</th>
                        <th>Hasta Adı</th>
                        <th>Hasta Soyadı</th>
                        <th class="text-center">Son Temizlik</th>
                        <th class="text-center">Durum</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var bed in Model.Beds)
                    {
                        <tr>
                            <td class="text-center">@bed.Id</td>
                            <td class="text-center">@bed.RoomId</td>
                            <td class="text-center">@bed.RoomNumber</td>
                            <td class="text-center">@bed.BedNumber</td>
                            <td class="text-center">@(bed.PatientId.HasValue ? bed.PatientId.ToString() : "-")</td>
                            <td>@(bed.PatientId.HasValue ? bed.PatientName : "-")</td>
                            <td>@(bed.PatientId.HasValue ? bed.PatientSurname : "-")</td>
                            <td class="text-center">
                                @(bed.LastCleanedDate.HasValue ? bed.LastCleanedDate.Value.ToString("yyyy-MM-dd HH:mm") : "-")
                            </td>
                            <td class="status-cell text-center">
                                <form class="status-form" data-bed-id="@bed.Id">
                                    <select name="SelectedStatus"
                                            class="form-select form-select-sm status-select"
                                            data-original-value="@bed.Status"
                                            data-bed-id="@bed.Id">
                                        <option value="Cleaned" selected="@(bed.Status == "Cleaned")">@CleanerHelper.GetTurkishStatus("Cleaned")</option>
                                        <option value="Cleaning" selected="@(bed.Status == "Cleaning")">@CleanerHelper.GetTurkishStatus("Cleaning")</option>
                                        <option value="In Care" selected="@(bed.Status == "In Care")">@CleanerHelper.GetTurkishStatus("In Care")</option>
                                        <option value="Waiting" selected="@(bed.Status == "Waiting")">@CleanerHelper.GetTurkishStatus("Waiting")</option>
                                    </select>
                                </form>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Toggle filter form
        const toggleFilterFormBtn = document.getElementById('toggleFilterForm');
        const filterCard = document.getElementById('filterCard');
        toggleFilterFormBtn.addEventListener('click', function () {
            if (filterCard.style.display === 'none' || filterCard.style.display === '') {
                filterCard.style.display = 'block';
                toggleFilterFormBtn.innerHTML = '<i class="fas fa-filter me-1"></i> Filtreleri Gizle';
            } else {
                filterCard.style.display = 'none';
                toggleFilterFormBtn.innerHTML = '<i class="fas fa-filter me-1"></i> Filtreleri Göster';
            }
        });

        // Prevent form submissions
        document.querySelectorAll('.status-form').forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
            });
        });

        // Handle status select changes
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function () {
                const form = this.closest('form');
                const bedId = this.dataset.bedId;
                const newStatus = this.value;
                const originalStatus = this.dataset.originalValue;

                if (newStatus !== originalStatus) {
                    showConfirmationToast(bedId, newStatus, form, this);
                }
            });
        });
    });

    function showConfirmationToast(bedId, newStatus, form, selectElement) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';
        toast.setAttribute('data-bed-id', bedId);
        toast.setAttribute('data-new-status', newStatus);

        const turkishStatus = getTurkishStatus(newStatus);

        toast.innerHTML = `
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <strong>Durum Değişikliğini Onayla</strong>
                    <button type="button" class="btn-close" onclick="cancelStatusChange(this)"></button>
                </div>
                <p class="mb-2">Yatak ${bedId} için yeni durum: <b>${turkishStatus}</b>?</p>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-primary" onclick="submitStatusChange(${bedId}, '${newStatus}', this)">Onayla</button>
                    <button class="btn btn-sm btn-secondary" onclick="cancelStatusChange(this)">Vazgeç</button>
                </div>
            `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';

        selectElement.disabled = true;
    }

    function submitStatusChange(bedId, newStatus, button) {
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        const select = document.querySelector(`.status-select[data-bed-id='${bedId}']`);

        select.closest('td').classList.add('loading');

        fetch(`/Cleaner/UpdateBedStatus?id=${bedId}&status=${newStatus}`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "RequestVerificationToken": token
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.message === "Bed status updated successfully") {
                    button.closest('.custom-toast').remove();

                    select.dataset.originalValue = newStatus;
                    select.disabled = false;

                    if (newStatus === "Cleaned" && data.lastCleanedDate) {
                        let lastCleanedCell = select.closest("tr").querySelector("td:nth-child(8)");
                        lastCleanedCell.innerText = data.lastCleanedDate;
                    }

                    showNotificationToast("Durum başarıyla güncellendi", "success");
                } else {
                    showNotificationToast("İşlem başarısız: " + data.message, "error");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                showNotificationToast("Durum güncellenirken hata oluştu", "error");

                select.value = select.dataset.originalValue;
                select.disabled = false;
                button.closest('.custom-toast').remove();
            })
            .finally(() => {
                select.closest('td').classList.remove('loading');
            });
    }

    function cancelStatusChange(button) {
        const toast = button.closest('.custom-toast');
        const bedId = toast.getAttribute('data-bed-id');
        const selectElement = document.querySelector(`.status-select[data-bed-id='${bedId}']`);

        selectElement.value = selectElement.dataset.originalValue;
        selectElement.disabled = false;
        toast.remove();
    }

    function resetFilters() {
        const form = document.getElementById('filterForm');
        if (!form) return;
        const inputs = Array.from(form.querySelectorAll('input, select'));
        inputs.forEach(input => {
            if (input.type === 'text' || input.type === 'date' || input.type === 'number') {
                input.value = '';
            } else if (input.tagName.toLowerCase() === 'select') {
                input.selectedIndex = 0;
            }
        });
        form.submit();
    }

    function showNotificationToast(message, type = "info") {
        const toast = document.createElement('div');
        toast.className = `custom-toast ${type}`;
        toast.innerHTML = `
                <div class="d-flex justify-content-between align-items-center">
                    <span>${message}</span>
                    <button type="button" class="btn-close" onclick="this.closest('.custom-toast').remove()"></button>
                </div>
            `;
        document.querySelector('.toast-container').appendChild(toast);

        // Auto-remove after 3 seconds
        setTimeout(() => toast.remove(), 3000);
    }

    function getTurkishStatus(status) {
        switch(status) {
            case "Cleaned":
                return "Temizlendi";
            case "Cleaning":
                return "Temizleniyor";
            case "In Care":
                return "Bakımda";
            case "Waiting":
                return "Bekliyor";
            default:
                return status;
        }
    }
</script>

    <style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
    }

    .custom-toast.success {
        background: #28a745;
        color: white;
    }

    .custom-toast.error {
        background: #dc3545;
        color: white;
    }

    .custom-toast.info {
        background: #17a2b8;
        color: white;
    }

    .custom-toast button {
        position: relative;
        z-index: 1052;
        pointer-events: auto;
    }

    .custom-toast .btn-close {
        opacity: 0.8;
        pointer-events: auto;
    }

    .custom-toast .btn-close:hover {
        opacity: 1;
    }

    .custom-toast p {
        margin-bottom: 0.5rem;
    }

    .custom-toast * {
        pointer-events: auto;
    }

    .custom-toast .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    .custom-toast .gap-2 {
        gap: 0.5rem !important;
    }

    .status-select:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .loading {
        position: relative;
        pointer-events: none;
    }

    .loading::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.7);
    }
</style>
}