@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SankoHospital.MvcWebUI.Helpers
@model SankoHospital.MvcWebUI.Models.FilterModels.RoomListViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Odalar";
}

<h2 class="mb-4 fw-bold">Oda Listesi</h2>

<!-- Filtre Formu -->
@await Html.PartialAsync("_RoomFilterPartial", Model)

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

<table class="table table-hover">
    <thead>
    <tr>
        <th>ID</th>
        <th>Oda Numarası</th>
        <th>Kapasite</th>
        <th>Hasta Sayısı</th>
        <th>Doluluk</th>
        <th>Son Temizlik</th>
        <th>Durum</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var room in Model.Rooms)
    {
        <tr>
            <td>@room.Id</td>
            <td>@room.RoomNumber</td>
            <td>@room.Capacity</td>
            <td>@room.CurrentPatientCount</td>
            <td>@(room.CurrentPatientCount >= room.Capacity ? "Dolu" : "Boş")</td>
            <td>@(room.LastCleanedDate.HasValue ? room.LastCleanedDate.Value.ToString("yyyy-MM-dd HH:mm") : "-")</td>
            <td class="status-cell">
                <form class="status-form" data-room-id="@room.Id">
                    <select name="SelectedStatus"
                            class="form-select form-select-sm status-select"
                            data-original-value="@room.Status"
                            data-room-id="@room.Id">
                        <option value="Cleaned" selected="@(room.Status == "Cleaned")">@CleanerHelper.GetTurkishStatus("Cleaned")</option>
                        <option value="Cleaning" selected="@(room.Status == "Cleaning")">@CleanerHelper.GetTurkishStatus("Cleaning")</option>
                        <option value="In Care" selected="@(room.Status == "In Care")">@CleanerHelper.GetTurkishStatus("In Care")</option>
                        <option value="Waiting" selected="@(room.Status == "Waiting")">@CleanerHelper.GetTurkishStatus("Waiting")</option>
                    </select>
                </form>
            </td>
        </tr>
    }
    </tbody>
</table>

@section Scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.status-select').forEach(select => {
            select.addEventListener('change', function () {
                const form = this.closest('form');
                const roomId = this.dataset.roomId;
                const newStatus = this.value;
                const originalStatus = this.dataset.originalValue;

                if (newStatus !== originalStatus) {
                    showConfirmationToast(roomId, newStatus, form, this);
                }
            });
        });
    });

    function showConfirmationToast(roomId, newStatus, form, selectElement) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';
        toast.setAttribute('data-room-id', roomId);
        toast.setAttribute('data-new-status', newStatus);

        toast.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>Durum Değişikliğini Onayla</strong>
                <button type="button" class="btn-close" onclick="cancelStatusChange(this)"></button>
            </div>
            <p class="mb-2">${roomId} için yeni durum: <b>${newStatus}</b>?</p>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-primary" onclick="submitStatusChange(${roomId}, '${newStatus}', this)">Onayla</button>
                <button class="btn btn-sm btn-secondary" onclick="cancelStatusChange(this)">Vazgeç</button>
            </div>
        `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';

        selectElement.disabled = true;
    }

    function submitStatusChange(roomId, newStatus, button) {
        fetch(`/Cleaner/UpdateRoomStatus?id=${roomId}&status=${newStatus}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" }
        })
            .then(response => response.json())
            .then(data => {
                if (data.message === "Room status updated successfully") {
                    button.closest('.custom-toast').remove();

                    let select = document.querySelector(`.status-select[data-room-id='${roomId}']`);
                    select.dataset.originalValue = newStatus;
                    select.disabled = false;

                    // Last cleaned date güncellendiyse ekrana yansıt
                    if (newStatus === "Cleaned" && data.lastCleanedDate) {
                        let lastCleanedCell = select.closest("tr").querySelector("td:nth-child(6)");
                        lastCleanedCell.innerText = data.lastCleanedDate;
                    }
                } else {
                    alert("Unexpected error.");
                }
            })
            .catch(error => {
                console.error("Error:", error);
                alert("Error occurred while updating status.");
            });
    }

    function cancelStatusChange(button) {
        const toast = button.closest('.custom-toast');
        const roomId = toast.getAttribute('data-room-id');
        const selectElement = document.querySelector(`.status-select[data-room-id='${roomId}']`);

        selectElement.value = selectElement.dataset.originalValue;
        selectElement.disabled = false;
        toast.remove();
    }

    function resetFilters() {
        const form = document.getElementById('filterForm');
        if (!form) return;
        const inputs = Array.from(form.querySelectorAll('input, select'));
        inputs.forEach(input => {
            if (input.type === 'text' || input.type === 'date' || input.type === 'number') {
                input.value = '';
            } else if (input.tagName.toLowerCase() === 'select') {
                input.selectedIndex = 0;
            }
        });
        form.submit();
    }

    </script>

    <style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }

    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
    }

    .custom-toast.success {
        background: #28a745;
        color: white;
    }

    .custom-toast.error {
        background: #dc3545;
        color: white;
    }

    .custom-toast button {
        position: relative;
        z-index: 1052;
        pointer-events: auto;
    }

    .custom-toast .btn-close {
        opacity: 0.8;
        pointer-events: auto;
    }

    .custom-toast .btn-close:hover {
        opacity: 1;
    }

    .custom-toast p {
        margin-bottom: 0.5rem;
    }

    /* Ensure all toast content is clickable */
    .custom-toast * {
        pointer-events: auto;
    }

    /* Style adjustments for confirmation toast buttons */
    .custom-toast .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }

    .custom-toast .gap-2 {
        gap: 0.5rem !important;
    }
</style>
}