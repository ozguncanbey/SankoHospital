@model List<SankoHospital.MvcWebUI.Models.NurseModel.PatientViewModel>

@{
Layout = "~/Views/Shared/_Layout.cshtml";
ViewData["Title"] = "Patients";
}

<h2 class="mb-4 fw-bold">Patients List</h2>

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

<!-- Patients Table -->
<table class="table table-hover">
    <thead>
    <tr>
        <th>ID</th>
        <th>Name</th>
        <th>Surname</th>
        <th>Blood Type</th>
        <th>Blood Pressure</th>
        <th>Pulse</th>
        <th>Blood Sugar</th>
        <th>Admission Date</th>
        <th>Checked</th>
        <th>Actions</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var patient in Model)
    {
    <tr data-patient-id="@patient.Id">
        <td>@patient.Id</td>
        <td>@patient.Name</td>
        <td>@patient.Surname</td>
        <td>@patient.BloodType</td>
        <td>
            <input type="text" class="form-control form-control-sm blood-pressure"
                   value="@patient.BloodPressure" placeholder="e.g. 120/80" />
        </td>
        <td>
            <input type="number" class="form-control form-control-sm pulse"
                   value="@(patient.Pulse.HasValue ? patient.Pulse.ToString() : "")" placeholder="Pulse" />
        </td>
        <td>
            <input type="text" class="form-control form-control-sm blood-sugar"
                   value="@patient.BloodSugar" placeholder="e.g. 90 mg/dL" />
        </td>
        <td>@patient.AdmissionDate.ToShortDateString()</td>
        <td>
            <input type="checkbox" class="form-check-input checked-status" @(patient.Checked ? "checked" : "") />
        </td>
        <td>
            <button class="btn btn-sm btn-primary save-btn">Save</button>
        </td>
    </tr>
    }
    </tbody>
</table>

@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Save butonuna tıklama event'leri
        document.querySelectorAll('.save-btn').forEach(function (button) {
            button.addEventListener('click', function () {
                const row = this.closest('tr');
                const patientId = row.dataset.patientId;
                const bloodPressure = row.querySelector('.blood-pressure').value.trim();
                const pulse = row.querySelector('.pulse').value.trim();
                const bloodSugar = row.querySelector('.blood-sugar').value.trim();
                // Manuel olarak checkbox'ın durumunu oku
                const manualChecked = row.querySelector('.checked-status').checked;

                showConfirmationToast(patientId, { bloodPressure, pulse, bloodSugar, manualChecked });
            });
        });
    });

    function showConfirmationToast(patientId, data) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';

        toast.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>Confirm Save</strong>
                <button type="button" class="btn-close close-toast"></button>
            </div>
            <p class="mb-2">Are you sure you want to save the changes for patient ID ${patientId}?</p>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-primary confirm-btn" data-patient-id="${patientId}">Confirm</button>
                <button class="btn btn-sm btn-secondary close-toast">Cancel</button>
            </div>
        `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';

        // Kapatma butonları
        toast.querySelectorAll('.close-toast').forEach(function (btn) {
            btn.addEventListener('click', function () {
                toast.remove();
            });
        });

        // Onay butonu
        toast.querySelector('.confirm-btn').addEventListener('click', function () {
            const patientId = this.dataset.patientId;
            submitSave(patientId, data);
            toast.remove();
        });
    }

    function submitSave(patientId, data) {
        // Eğer tüm yeni alanlar doldurulmuşsa, otomatik olarak true; aksi halde manuel checkbox değeri kullanılsın.
        const autoChecked = (data.bloodPressure !== "" && data.pulse !== "" && data.bloodSugar !== "");
        const payload = {
            Id: patientId,
            BloodPressure: data.bloodPressure,
            Pulse: data.pulse ? parseInt(data.pulse) : null,
            BloodSugar: data.bloodSugar,
            // Otomatik olarak doluysa veya kullanıcı işaretlediyse true
            Checked: autoChecked || data.manualChecked
        };

        fetch(`/Nurse/SavePatientData`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(function (response) { return response.json(); })
            .then(function (result) {
                if (result.success) {
                    showToast('Patient data saved successfully!', 'success');
                } else {
                    showToast('Error: ' + result.message, 'error');
                }
            })
            .catch(function (error) {
                showToast('Error saving data: ' + error.message, 'error');
            });
    }

    function showToast(message, type) {
        const toast = document.createElement('div');
        toast.className = `custom-toast ${type}`;
        toast.innerHTML = `<p>${message}</p>`;
        document.querySelector('.toast-container').appendChild(toast);
        setTimeout(function () { toast.remove(); }, 3000);
    }
</script>

<style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1050;
    }
    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: block;
        position: relative;
        z-index: 1051;
    }
    .custom-toast.success {
        background: #28a745;
        color: white;
    }
    .custom-toast.error {
        background: #dc3545;
        color: white;
    }
    .custom-toast button {
        position: relative;
        z-index: 1052;
        pointer-events: auto;
    }
    .custom-toast .btn-close {
        opacity: 0.8;
        pointer-events: auto;
    }
    .custom-toast .btn-close:hover {
        opacity: 1;
    }
    .custom-toast p {
        margin-bottom: 0.5rem;
    }
    .custom-toast * {
        pointer-events: auto;
    }
    .custom-toast .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
    }
    .custom-toast .gap-2 {
        gap: 0.5rem !important;
    }
</style>
