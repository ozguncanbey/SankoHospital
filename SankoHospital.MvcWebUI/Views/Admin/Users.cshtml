@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SankoHospital.MvcWebUI.Helpers
@model SankoHospital.MvcWebUI.Models.FilterModels.UserListViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Yönetici - Kullanıcılar";
}

@section PageStyles {
    <style>
    .admin-header {
        font-size: 1.8rem;
        font-weight: 700;
        color: #1e293b;
        margin-bottom: 1.5rem;
        letter-spacing: -0.5px;
    }

    .admin-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 24px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.08);
        padding: 2rem 3rem;
        width: 100%;
        transition: all 0.3s ease;
    }

    .admin-card:hover {
        transform: translateY(-5px);
    }

    .role-select {
        width: auto;
        padding-right: 2.5rem;
        cursor: pointer;
        transition: all 0.2s ease;
        border-color: #e2e8f0;
    }

    .role-select:hover {
        border-color: #94a3b8;
    }

    .role-select:focus {
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
        border-color: #3b82f6;
    }

    .table > :not(caption) > * > * {
        padding: 1rem;
    }

    .table thead th {
        background: #f8fafc;
        color: #475569;
        font-weight: 600;
        text-transform: uppercase;
        font-size: 0.875rem;
        letter-spacing: 0.05em;
    }

    .role-cell {
        position: relative;
    }

    .role-indicator {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        width: 6px;
        height: 6px;
        border-radius: 50%;
        transition: all 0.3s ease;
    }

    .role-changed {
        background-color: #22c55e;
        animation: pulse 1.5s infinite;
    }

    .delete-btn {
        border: 1px solid #ef4444;
        color: #ef4444;
        transition: all 0.2s ease;
        border-radius: 8px;
        padding: 0.5rem 1rem;
    }

    .delete-btn:hover {
        background-color: #ef4444;
        color: white;
    }

    /* Toast Notification */
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        pointer-events: auto;
    }

    .custom-toast {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 1rem;
        margin-bottom: 1rem;
        min-width: 300px;
        display: none;
        animation: slideIn 0.3s ease;
        position: relative;
        pointer-events: auto;
    }

    .custom-toast button {
        position: relative;
        z-index: 1;
        pointer-events: auto;
    }

    @@keyframes slideIn {
         from { transform: translateX(100%); }
         to { transform: translateX(0); }
     }

    @@keyframes pulse {
         0% { opacity: 1; }
         50% { opacity: 0.5; }
         100% { opacity: 1; }
     }
</style>
}

<!-- Filtre Formu -->
<div class="card mb-4">
    <div class="card-body">
        <form id="filterForm" method="get" class="row g-3">
            <!-- Kullanıcı ID -->
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">Kullanıcı ID</label>
                    <input type="number" name="id" class="form-control form-control-sm"
                           value="@(Model.Id.HasValue ? Model.Id.Value.ToString() : string.Empty)" placeholder="Kullanıcı ID"/>
                </div>
            </div>
            <!-- Kullanıcı Adı -->
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">Kullanıcı Adı</label>
                    <input type="text" name="username" class="form-control form-control-sm"
                           value="@Model.Username" placeholder="Kullanıcı Adı"/>
                </div>
            </div>
            <!-- Rol -->
            <!-- Rol -->
            <div class="col-md-2">
                <div class="form-group">
                    <label class="form-label">Rol</label>
                    <select name="SelectedRole" class="form-select form-select-sm">
                        <option value="">Tümü</option>
                        @foreach (var item in Model.RoleList)
                        {
                        if (Model.SelectedRole == item.Value)
                        {
                        <option value="@item.Value" selected="selected">@item.Text</option>
                        }
                        else
                        {
                        <option value="@item.Value">@item.Text</option>
                        }
                        }
                    </select>
                </div>
            </div>
            <!-- Butonlar -->
            <div class="col-md-12">
                <div class="form-group d-flex gap-2 justify-content-center">
                    <button type="submit" class="btn btn-primary btn-sm">
                        <i class="fas fa-search me-1"></i> Filtrele
                    </button>
                    <button type="button" class="btn btn-secondary btn-sm" onclick="resetFilters()">
                        <i class="fas fa-undo me-1"></i> Sıfırla
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="admin-card">
    <h2 class="admin-header">Kullanıcı Listesi</h2>
    <table class="table table-hover">
        <thead>
        <tr>
            <th>Id</th>
            <th>Kullanıcı Adı</th>
            <th>Rol</th>
            <th style="width: 150px;">Aksiyonlar</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in Model.Users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Username</td>
                <td class="role-cell">
                    <form asp-action="InlineUpdateRole"
                          asp-controller="Admin"
                          method="post"
                          class="role-form"
                          data-username="@user.Username"
                          id="form_@user.Id">

                        <input type="hidden" name="UserId" value="@user.Id"/>
                        <select name="SelectedRole"
                                class="form-select form-select-sm role-select"
                                data-original-value="@user.Role">
                            <option value="Admin" selected="@(user.Role == "Admin")">@RoleHelper.GetTurkishRole("Admin")</option>
                            <option value="User" selected="@(user.Role == "User")">@RoleHelper.GetTurkishRole("User")</option>
                            <option value="Receptionist" selected="@(user.Role == "Receptionist")">@RoleHelper.GetTurkishRole("Receptionist")</option>
                            <option value="Nurse" selected="@(user.Role == "Nurse")">@RoleHelper.GetTurkishRole("Nurse")</option>
                            <option value="Cleaner" selected="@(user.Role == "Cleaner")">@RoleHelper.GetTurkishRole("Cleaner")</option>
                        </select>
                        <span class="role-indicator"></span>
                    </form>
                </td>
                <td>
                    <button class="btn delete-btn"
                            onclick="confirmDelete('@user.Id', '@user.Username')">
                        <i class="fas fa-trash-alt me-1"></i> Sil
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<!-- Toast Notifications Container -->
<div class="toast-container"></div>

@section Scripts {
    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Role değişikliği için event listener
        document.querySelectorAll('.role-select').forEach(select => {
            select.addEventListener('change', function () {
                const form = this.closest('form');
                const username = form.dataset.username;
                const newRole = this.value;
                const originalRole = this.dataset.originalValue;

                if (newRole !== originalRole) {
                    showConfirmationToast(username, newRole, form, this);
                }
            });
        });
    });

    function showConfirmationToast(username, newRole, form, selectElement) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';
        toast.setAttribute('data-form-id', form.id);

        toast.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>Rol Değişimini Onayla</strong>
                <button type="button" class="btn-close" onclick="cancelRoleChange(this)"></button>
            </div>
            <p class="mb-2">${username} içi yeni rol: ${newRole}?</p>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-primary" onclick="submitRoleChange(this)">Onayla</button>
                <button class="btn btn-sm btn-secondary" onclick="cancelRoleChange(this)">Vazgeç</button>
            </div>
        `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';

        toast.dataset.originalRole = selectElement.dataset.originalValue;
    }

    function submitRoleChange(button) {
        const toast = button.closest('.custom-toast');
        const formId = toast.getAttribute('data-form-id');
        const form = document.getElementById(formId);

        if (form) {
            const indicator = form.querySelector('.role-indicator');
            form.submit();
            indicator.classList.add('role-changed');
        }

        toast.remove();
    }

    function cancelRoleChange(button) {
        const toast = button.closest('.custom-toast');
        const formId = toast.getAttribute('data-form-id');
        const form = document.getElementById(formId);

        if (form) {
            const select = form.querySelector('.role-select');
            select.value = toast.dataset.originalRole;
        }

        toast.remove();
    }

    function confirmDelete(userId, username) {
        const toast = document.createElement('div');
        toast.className = 'custom-toast';
        toast.innerHTML = `
            <div class="d-flex justify-content-between align-items-center mb-2">
                <strong>Silmeyi Onayla</strong>
                <button type="button" class="btn-close" onclick="this.closest('.custom-toast').remove()"></button>
            </div>
            <p class="mb-2">Silmek istediğinizden emin misiniz?: ${username}</p>
            <div class="d-flex gap-2">
                <button class="btn btn-sm btn-danger" onclick="deleteUser('${userId}', this)">Sil</button>
                <button class="btn btn-sm btn-secondary" onclick="this.closest('.custom-toast').remove()">Vazgeç</button>
            </div>
        `;

        document.querySelector('.toast-container').appendChild(toast);
        toast.style.display = 'block';
    }

    function deleteUser(userId, button) {
        window.location.href = `/admin/delete/${userId}`;
    }
    
    function resetFilters() {
        const form = document.getElementById('filterForm');
        if (!form) return;
        const inputs = Array.from(form.querySelectorAll('input, select'));
        inputs.forEach(input => {
            if (input.type === 'text' || input.type === 'date' || input.type === 'number') {
                input.value = '';
            } else if (input.tagName.toLowerCase() === 'select') {
                input.selectedIndex = 0;
            }
        });
        form.submit();
    }
</script>
}